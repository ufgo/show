
¦·
§H-- DefSave helps with loading and saving config and player data between sesssions

local utf8 = require("defsave.utf8")
local json = require("defsave.json") -- used for HTML5

local M = {}

M.autosave = false -- set to true to autosave all loaded files that are changed on a timer
M.autosave_timer = 10 -- amount of seconds between autosaves if changes have been made
M.timer = 0 -- current timer value only increases if autosave is enabled
M.changed = false -- locally used but can be useful to have exposed
M.verbose = true -- if true then more information will be printed such as autosaves
M.block_reloading = false -- if true then files already loaded will never be overwritten with a reload
M.appname = "defsave" -- determines part of the path for saving files to
M.loaded = {} -- list of files currently loaded
M.sysinfo = sys.get_sys_info()
M.use_default_data = true -- if true will attempt to load default data from the default_data table when loading empty file
M.enable_encryption = false -- if true then all data saved and loaded will be encrypted with AES - SLOWER
M.encryption_key = "defsave" -- pick an encryption key to use if you're using encryption
M.enable_obfuscation= false -- if true then all data saved and loaded will be XOR obfuscated - FASTER
M.obfuscation_key = "defsave" -- pick an obfuscation key it use if you're using encryption, the longer the key for obfuscation the better

-- You don't have to save your keys directly in one file as a single string... you can get creative with how you store your keys
-- Don't expect your save files to not be unlocked by someone eventually, don't store sensetive data in your files!
-- This is only a deterent for casual users to not mess with save data files
-- And your users can still use memory editing tools which you must defend against with other ways if you even wish to

M.default_data = {} -- default data to set files to if any cannnot be loaded

function M.set_appname(appname)
	assert(type(appname) == "string", "DefSave: set_appname must pass a string")
	M.appname = appname
end

function M.obfuscate(input, key)
	key = key or M.obfuscation_key
	local output = ""
	local key_iterator = 1

	local input_length = #input
	local key_length = #key

	for i=1, input_length do
		local character = string.byte(input:sub(i,i))
		if key_iterator >= key_length + 1 then key_iterator = 1 end -- cycle
		local key_byte = string.byte(key:sub(key_iterator,key_iterator))
		output = output .. string.char(bit.bxor( character , key_byte))

		key_iterator = key_iterator + 1

	end
	return output
end


local function clone(t) -- deep-copy a table
	if type(t) ~= "table" then return t end
	local meta = getmetatable(t)
	local target = {}
	for k, v in pairs(t) do
		if type(v) == "table" then
			target[k] = clone(v)
		else
			target[k] = v
		end
	end
	setmetatable(target, meta)
	return target
end

local function copy(t) -- shallow-copy a table
	if type(t) ~= "table" then return t end
	local meta = getmetatable(t)
	local target = {}
	for k, v in pairs(t) do target[k] = v end
	setmetatable(target, meta)
	return target
end


function M.get_file_path(file)
	if M.appname == "defsave" then
		print("DefSave: You need to set a non-default appname to defsave.appname")
	end
	if file == nil then
		print("DefSave: Warning attempting to get a path for a nil file")
		return nil
	end
	if M.sysinfo.system_name == "Linux" then
		-- For Linux we must modify the default path to make Linux users happy
		local appname = "config/" .. tostring(M.appname)
		return sys.get_save_file(appname, file)
	end
	if html5 then
		-- For HTML5 there's no need to get the full path
		return M.appname .. "_" .. file
	end
	return sys.get_save_file(M.appname, file)
end

function M.load(file)

	if file == nil then
		print("DefSave: Warning no file specified when attempting to load")
		return nil
	end

	local path = M.get_file_path(file)

	if path == nil then
		print("DefSave: Warning path returned when attempting to load is nil")
		return nil
	end

	if M.loaded[file] ~= nil then
		if M.block_reloading == false then
			print("DefSave: Warning the file " .. file .. " was already loaded and will be reloaded possibly overwriting changes")
		else
			print("DefSave: Warning attempt to reload already file has been blocked")
			return true
		end
	end

	local loaded_file
	if html5 then
		-- sys.load can't be used for HTML5 apps running on iframe from a different origin (cross-origin iframe)
		-- use `localStorage` instead because of this limitation on default IndexedDB storage used by Defold
		loaded_file = json.decode(html5.run([[(function(){try{return window.localStorage.getItem(']] .. path .. [[')||'{}'}catch(e){return'{}'}})()]]))
	else
		loaded_file  = sys.load(path)
	end

	local empty = false


	if next(loaded_file) == nil then
		if M.verbose then print("DefSave: Loaded file '" .. file .. "' is empty") end
		empty = true
	end

	if M.use_default_data and empty then
		if (M.reset_to_default(file)) then
			return true
		else
			return false
		end

	elseif empty then
		print("DefSave: The " .. file .. " is loaded but it was empty")
		M.loaded[file] = {}
		M.loaded[file].changed = true
		M.changed = true
		M.loaded[file].data = {}
		return true
	end


	M.loaded[file] = {}
	M.loaded[file].changed = false
	M.loaded[file].data = loaded_file

	if M.verbose then  print("DefSave: The file '" .. file .. "' was successfully loaded") end

	return true

end

function M.save(file, force)
	force = force or false

	if M.loaded[file] == nil then
		print("DefSave: Warning attempt to save a file which could not be found in loaded list")
		return nil
	end

	if M.loaded[file].changed == false and force == false then
		if M.verbose then  print("DefSave: File '" .. file .. "' is unchanged so not saving, set force flag to true to force saving if changed flag is false") end
		return true
	end

	local path = M.get_file_path(file)

	local is_save_successful;
	if html5 then
	-- sys.save can't be used for HTML5 apps running on iframe from a different origin (cross-origin iframe)
	-- use `localStorage` instead because of this limitation on default IndexedDB storage used by Defold
	local encoded_data = json.encode(M.loaded[file].data):gsub("'", "\'") -- escape ' characters
	html5.run([[try{window.localStorage.setItem(']] .. path .. [[', ']] .. encoded_data .. [[')}catch(e){}]])

	is_save_successful = true

	else
		is_save_successful = sys.save(path, M.loaded[file].data)
	end

	if is_save_successful then
		if M.verbose then print("DefSave: File '" .. tostring(file) .. "' has been saved to the path '" .. path .. "'") end
		M.loaded[file].changed = false
		return true
	else
		print("DefSave: Something went wrong when attempting to save the file '" .. tostring(file) .. "' to the path '" .. path .. "'")
		return nil
	end
end


function M.save_all(force)
	force = force or false
	for key, value in pairs(M.loaded) do
		M.save(key, force)
		M.changed = false
	end
end

function M.get(file, key)
	if M.loaded[file] ~= nil then
		if M.loaded[file].data[key] ~= nil then
			local value = clone(M.loaded[file].data[key])
			return value
		else
			print("DefSave: Warning when attempting to get a key '" .. key .. "' of file '" .. tostring(file) .. "' the key was nil")
			return nil
		end
	else
		print("DefSave: Warning when attempting to get a key '" .. key .. "' the file '" .. tostring(file) .. "' could not be found in loaded list")
		return nil
	end
end

function M.set(file, key, value)
	if M.loaded[file] ~= nil then
		-- we could check here to see if values are the same or not to set the changed flags or not but would require deep table compare loop
		value = clone(value) -- decouple from original table if value is a table
		M.loaded[file].data[key] = value
		M.loaded[file].changed = true
		M.changed = true
		return true
	else
		print("DefSave: Warning when attempting to set a key '" .. key .. "' the file '" .. tostring(file) .. "' could not be found in loaded list")
		return nil
	end
end

function M.key_exists(file, key)
	if M.loaded[file] ~= nil then
		if M.loaded[file].data[key] ~= nil then
			return true
		end
	else
		return false
	end
end

function M.isset(file, key)
	return M.key_exists(file, key)
end

function M.reset_to_default(file)
	if M.default_data[file] ~= nil then
		M.loaded[file] = {}
		M.loaded[file].changed = true
		M.changed = true
		M.loaded[file].data = clone(M.default_data[file])
		if M.verbose then print("DefSave: Successfully set the file '" .. file .. "' to its default state") end
		return true
	else
		print("DefSave: There is no default file set for '" .. file .. "' so setting it to empty")
		M.loaded[file] = {}
		M.loaded[file].changed = true
		M.changed = true
		M.loaded[file].data = {}
		return true
	end
end


function M.is_loaded(file)
	if M.loaded[file] ~= nil then
		return true
	else
		return false
	end
end



function M.update(dt)
	if M.autosave == true then
		if dt == nil then
			print("DefSave: You must pass dt to defsave.update")
		end
		M.timer = M.timer + dt


		if M.timer >= M.autosave_timer then
			if M.changed == true then
				M.save_all()
				if M.verbose then print("DefSave: Autosaved All Changed Files") end
			end
			M.timer = M.timer - M.autosave_timer
		end
	end
end

function M.final()
	M.save_all()
end

return M
/defsave/defsave.lua°7LJ =/defsave/defsave.lua¢  6  6   B X€+ X€+ ' B-  = K  Àappname,DefSave: set_appname must pass a stringstring	typeassertM appname   ‡ -–#  X€-  9 ' )    )  ) M €6
 9

  9 	 	 B A
   X€) 6 9 9  B A  6 96 9
  B A & OàL À	bxorbit	charsub	bytestringobfuscation_key								



M input  .key  .output (key_iterator 'input_length &key_length %! ! !i character key_byte  ƒ 
  L86    B X€L  6   B4  6   BH€6  	 B X€-  	 B<X€<FRó6   BL Àsetmetatable
pairsgetmetatable
table	typeclone t  !meta 
target   k v   É 	  <G6    B X€L  6   B4  6   BH€<FRý6   BL setmetatable
pairsgetmetatable
table	typet  meta 
target   k v   ×  -AQ-  9  X€6 ' B   X€6 ' B+  L -  99 X€' 6	 -  9 B&6
 9   D 6   X€-  9 '   &L 6
 9-  9   D À_
html5get_save_filesystostringconfig/
Linuxsystem_namesysinfo=DefSave: Warning attempting to get a path for a nil fileFDefSave: You need to set a non-default appname to defsave.appname
printdefsaveappname





M file  .appname  Š  “ÁeA   X€6  ' B+  L -  9  B  X€6  ' B+  L -  98 
  X€-  9 X€6  '   ' &BX€6  ' B+ L +  6	   X€- 9
6	 9'  ' &B A  X€6 9 B + 6  B  X€-  9  X€6  '   ' &B+ -  9  X€  X€-  9  B  X€+ L X€+ L X€  X€6  '   ' &B-  94  < -  98 + =-  + =-  98 4  =+ L -  94  < -  98 + =-  98 =-  9  X€6  '   ' &B+ L ÀÀ' was successfully loadedDefSave: The file '	datachanged  is loaded but it was emptyDefSave: The reset_to_defaultuse_default_data' is emptyDefSave: Loaded file 'verbose	next	loadsys&')||'{}'}catch(e){return'{}'}})()9(function(){try{return window.localStorage.getItem('rundecode
html5EDefSave: Warning attempt to reload already file has been blockedJ was already loaded and will be reloaded possibly overwriting changesDefSave: Warning the file block_reloadingloadedBDefSave: Warning path returned when attempting to load is nilget_file_path?DefSave: Warning no file specified when attempting to load
print		


 #####$$$$$$$$$$%(((((())))))***,,-//00000011112222233344444559999:::::;;;;==========??M json file  ”path ˆloaded_file kempty V µ  n°¨$  X€+ -  9 8   X€6 ' B+  L -  9 8 9 X€ X€-  9  X€6 '   ' &B+ L -  9  B+  6   X€- 9	-  9 8 9
B 9' ' B6 9'  ' 	 '
 &
B+ X	€6 9 -  9 8 9
B   X€-  9  X
€6 ' 6   B'  '	 &	B-  9 8 + =+ L X€6 ' 6   B'  '	 &	B+  L K  ÀÀ' to the path 'EDefSave: Something went wrong when attempting to save the file '#' has been saved to the path 'tostring	savesys')}catch(e){}	', '&try{window.localStorage.setItem('run'	gsub	dataencode
html5get_file_pathb' is unchanged so not saving, set force flag to true to force saving if changed flag is falseDefSave: File 'verbosechangedTDefSave: Warning attempt to save a file which could not be found in loaded list
printloaded										

!!!!!!!!!!""$M json file  oforce  opath &Iis_save_successful Hencoded_data 
 ¨ 	 5Ï   X€+  6  -  9BH€-  9   B-  + =FRöK  Àchanged	saveloaded
pairsM force    key value   ² 	 /M×-  9 8 
  X€-  9 8 98
  X	€- -  9 8 98BL X€6 '  ' 6   B' &B+  L X€6 '  ' 6   B' &B+  L K  ÀÀ(' could not be found in loaded list' the file '' the key was niltostring' of file '4DefSave: Warning when attempting to get a key '
print	dataloaded









M clone file  0key  0value  ï 	 &Dæ-  9 8 
  X€-  B -  9 8 9<-  9 8 + =-  + =+ L X€6 '  ' 6   B' &B+  L K  ÀÀ(' could not be found in loaded listtostring' the file '4DefSave: Warning when attempting to set a key '
printchanged	dataloaded										

M clone file  'key  'value  ' ƒ  "ô-  9 8 
  X
€-  9 8 98
  X€+ L X€+ L K  À	dataloadedM file  key   A  þ-  9    D Àkey_existsM file  key   ” 
 AQ‚-  9 8 
  X"€-  94  < -  98 + =-  + =-  98 - -  9 8 B=-  9  X€6 '   ' &B+ L X€6 '   '	 &B-  94  < -  98 + =-  + =-  98 4  =+ L K  ÀÀ' so setting it to empty0DefSave: There is no default file set for '' to its default state)DefSave: Successfully set the file '
printverbose	datachangedloadeddefault_data						



M clone file  B U  •-  9 8 
  X€+ L X€+ L K  ÀloadedM file   õ 	 *2Ÿ-  9  X%€   X€6 ' B-  -  9  =-  9-  9 X€-  9 X
€-  9B-  9  X€6 ' B-  -  9-  9!=K  À)DefSave: Autosaved All Changed Filesverbosesave_allchangedautosave_timer
timer0DefSave: You must pass dt to defsave.update
printautosave				


M dt  + -   ±-   9   B K  Àsave_allM  Ò  3 G° ¶6   ' B 6  ' B4  + =)
 =)  =+ =+ =+ ='
 =	4  =6 9B=+ =+ ='
 =+ ='
 =4  =3 =3 =3 3 3 =3 =3  =3" =!3$ =#3& =%3( ='3* =)3, =+3. =-30 =/32 =12  €L  
final update is_loaded reset_to_default 
isset key_exists set get save_all 	save 	load get_file_path   obfuscate set_appnamedefault_dataobfuscation_keyenable_obfuscationencryption_keyenable_encryptionuse_default_dataget_sys_infosyssysinfoloadeddefsaveappnameblock_reloadingverbosechanged
timerautosave_timerautosavedefsave.jsondefsave.utf8require         	 	 
 
                           !  5 # E N c Q ¦ e Ì ¨ Õ Ï ä × ò æ ü ô  þ /3155utf8 Djson AM @clone %copy   "°7LJ=/defsave/defsave.lua¢  6  6   B X€+ X€+ ' B-  = K  Àappname,DefSave: set_appname must pass a stringstring	typeassertM appname   ‡ -–#  X€-  9 ' )    )  ) M €6
 9

  9 	 	 B A
   X€) 6 9 9  B A  6 96 9
  B A & OàL À	bxorbit	charsub	bytestringobfuscation_key								



M input  .key  .output (key_iterator 'input_length &key_length %! ! !i character key_byte  ƒ   L86    B X€L  6   B4  6   BH€6  
 B X€-  
 B<X€<FRó6   BL Àsetmetatable
pairsgetmetatable
table	typeclone t  !meta 
target   k v   É 
  <G6    B X€L  6   B4  6   BH€<FRý6   BL setmetatable
pairsgetmetatable
table	typet  meta 
target   k v   ×  -AQ-  9  X€6 ' B   X€6 ' B+  L -  99 X€' 6	 -  9 B&6
 9   D 6   X€-  9 '   &L 6
 9-  9   D À_
html5get_save_filesystostringconfig/
Linuxsystem_namesysinfo=DefSave: Warning attempting to get a path for a nil fileFDefSave: You need to set a non-default appname to defsave.appname
printdefsaveappname





M file  .appname  Š 
 “ÁeA   X€6  ' B+  L -  9  B  X€6  ' B+  L -  98 
  X€-  9 X€6  '   ' &BX€6  ' B+ L +  6	   X€- 9
6	 9'  '	 &	B A  X€6 9 B + 6  B  X€-  9  X€6  '   ' &B+ -  9  X€  X€-  9  B  X€+ L X€+ L X€  X€6  '   ' &B-  94  < -  98 + =-  + =-  98 4  =+ L -  94  < -  98 + =-  98 =-  9  X€6  '   ' &B+ L ÀÀ' was successfully loadedDefSave: The file '	datachanged  is loaded but it was emptyDefSave: The reset_to_defaultuse_default_data' is emptyDefSave: Loaded file 'verbose	next	loadsys&')||'{}'}catch(e){return'{}'}})()9(function(){try{return window.localStorage.getItem('rundecode
html5EDefSave: Warning attempt to reload already file has been blockedJ was already loaded and will be reloaded possibly overwriting changesDefSave: Warning the file block_reloadingloadedBDefSave: Warning path returned when attempting to load is nilget_file_path?DefSave: Warning no file specified when attempting to load
print		


 #####$$$$$$$$$$%(((((())))))***,,-//00000011112222233344444559999:::::;;;;==========??M json file  ”path ˆloaded_file kempty V µ  n°¨$  X€+ -  9 8   X€6 ' B+  L -  9 8 9 X€ X€-  9  X€6 '   ' &B+ L -  9  B+  6   X€- 9	-  9 8 9
B 9' ' B6 9'  '	 
 ' &B+ X	€6 9 -  9 8 9
B   X€-  9  X
€6 ' 6 	  B' 	 '
 &
B-  9 8 + =+ L X€6 ' 6 	  B' 	 '
 &
B+  L K  ÀÀ' to the path 'EDefSave: Something went wrong when attempting to save the file '#' has been saved to the path 'tostring	savesys')}catch(e){}	', '&try{window.localStorage.setItem('run'	gsub	dataencode
html5get_file_pathb' is unchanged so not saving, set force flag to true to force saving if changed flag is falseDefSave: File 'verbosechangedTDefSave: Warning attempt to save a file which could not be found in loaded list
printloaded										

!!!!!!!!!!""$M json file  oforce  opath &Iis_save_successful Hencoded_data 
 ¨ 
 5Ï   X€+  6  -  9BH€-  9 	  B-  + =FRöK  Àchanged	saveloaded
pairsM force    key value   ² 
	 /M×-  9 8 
  X€-  9 8 98
  X	€- -  9 8 98BL X€6 '  ' 6 	  B' &B+  L X€6 '  ' 6 	  B' &B+  L K  ÀÀ(' could not be found in loaded list' the file '' the key was niltostring' of file '4DefSave: Warning when attempting to get a key '
print	dataloaded









M clone file  0key  0value  ï  &Dæ-  9 8 
  X€-  B -  9 8 9<-  9 8 + =-  + =+ L X€6 '  ' 6 
  B'	 &	B+  L K  ÀÀ(' could not be found in loaded listtostring' the file '4DefSave: Warning when attempting to set a key '
printchanged	dataloaded										

M clone file  'key  'value  ' ƒ  "ô-  9 8 
  X
€-  9 8 98
  X€+ L X€+ L K  À	dataloadedM file  key   A  þ-  9    D Àkey_existsM file  key   ” 
 AQ‚-  9 8 
  X"€-  94  < -  98 + =-  + =-  98 - -  9 8 B=-  9  X€6 '   ' &B+ L X€6 '   '	 &B-  94  < -  98 + =-  + =-  98 4  =+ L K  ÀÀ' so setting it to empty0DefSave: There is no default file set for '' to its default state)DefSave: Successfully set the file '
printverbose	datachangedloadeddefault_data						



M clone file  B U  •-  9 8 
  X€+ L X€+ L K  ÀloadedM file   õ 	 *2Ÿ-  9  X%€   X€6 ' B-  -  9  =-  9-  9 X€-  9 X
€-  9B-  9  X€6 ' B-  -  9-  9!=K  À)DefSave: Autosaved All Changed Filesverbosesave_allchangedautosave_timer
timer0DefSave: You must pass dt to defsave.update
printautosave				


M dt  + -   ±-   9   B K  Àsave_allM  Ò  3 G° ¶6   ' B 6  ' B4  + =)
 =)  =+ =+ =+ ='
 =	4  =6 9B=+ =+ ='
 =+ ='
 =4  =3 =3 =3 3 3 =3 =3  =3" =!3$ =#3& =%3( ='3* =)3, =+3. =-30 =/32 =12  €L  
final update is_loaded reset_to_default 
isset key_exists set get save_all 	save 	load get_file_path   obfuscate set_appnamedefault_dataobfuscation_keyenable_obfuscationencryption_keyenable_encryptionuse_default_dataget_sys_infosyssysinfoloadeddefsaveappnameblock_reloadingverbosechanged
timerautosave_timerautosavedefsave.jsondefsave.utf8require         	 	 
 
                           !  5 # E N c Q ¦ e Ì ¨ Õ Ï ä × ò æ ü ô  þ /3155utf8 Djson AM @clone %copy   defsave.utf8defsave.json/defsave/utf8.luac/defsave/json.luac" 